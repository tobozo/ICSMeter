name: PlatformIOBuild

env:
  SKETCH_NAME: ICSMeter
  GHPAGE_DIR: /home/runner/ICSMeter/gh-pages

on:
  push:
    branches-ignore: [gh-pages]
    paths:
    - '**.ino'
    - '**.ini'
    - '**.cpp'
    - '**.hpp'
    - '**.h'
    - '**.c'
    - '**PlatformioBuild.yml'
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: ${{matrix.board}}@${{matrix.platform-version}}

    runs-on: ubuntu-latest

    strategy:
      matrix:

        board:
          #- m5stack-core-esp32
          - m5stack-core2

        platform-version:
          - 2.0.3

        include:
          #- board: m5stack-core-esp32
          - board: m5stack-core2

      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{github.event.pull_request.head.sha}}
          fetch-depth: 0

      - name: Cache pip
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{runner.os}}-pip-${{hashFiles('**/requirements.txt')}}
          restore-keys: |
            ${{runner.os}}-pip-
      - name: Cache PlatformIO
        uses: actions/cache@v2
        with:
          path: ~/.platformio
          key: ${{runner.os}}-${{hashFiles('**/lockfiles')}}
      - name: Set up Python
        uses: actions/setup-python@v2

      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
          mkdir -p ${{env.GHPAGE_DIR}}

      - name: Set Build info
        id: info
        run: |
          echo "::set-output name=datetime::$(TZ=GMT date +'%Y-%m-%dT%H:%M:%S%z')"
          echo "::set-output name=epoch::$(date +'%s')"
          echo "::set-output name=build::$(git rev-list --all --count)"
          echo "::set-output name=version::$(cat main/version.h | grep -oP '\"\K[^\"]+')"
          echo "::set-output name=srcname::.pio/build/${{matrix.board}}@${{matrix.platform-version}}/firmware.bin"

      - name: Run PlatformIO
        run: |
          echo "[INFO] Injecting UPDATER_URL/BUILD_NUMBER/BUILD_DATETIME"
          cat settings.h | grep UPDATER_URL && echo "[WARNING] UPDATER_URL is built-in" || echo '#define UPDATER_URL "${{secrets.UPDATER_URL}}"' >> settings.h
          echo '#define BUILD_NUMBER ${{steps.info.outputs.build}}' >> settings.h
          echo '#define __TIME_UNIX__ ${{steps.info.outputs.epoch}}' >> settings.h
          pio run -e ${{matrix.board}}@${{matrix.platform-version}}

      - name: Prepare gh-pages
        env:
          srcname:   ${{steps.info.outputs.srcname}}
          dstname:   ${{env.SKETCH_NAME}}.${{matrix.board}}.bin
          dstnamegz: ${{env.SKETCH_NAME}}.${{matrix.board}}.bin.gz
          version:   ${{steps.info.outputs.version}}
          build:     ${{steps.info.outputs.build}}
          datetime:  ${{steps.info.outputs.datetime}}
          html:      ${{env.GHPAGE_DIR}}/${{matrix.board}}.html
          json:      ${{env.GHPAGE_DIR}}/${{matrix.board}}.json
        run: |
          cp ${{env.srcname}} ${{env.GHPAGE_DIR}}/${{env.dstname}}
          gzip -c ${{env.srcname}} > ${{env.GHPAGE_DIR}}/${{env.dstnamegz}}
          echo "<!doctype html><html><meta charset=utf8><body>Last update: ${{env.datetime}}" > ${{env.html}}
          echo "<br><a href=${{env.dstname}}>${{env.dstname}} ($(stat -c%s ${{env.GHPAGE_DIR}}/${{env.dstname}}) bytes)</a><br>" >> ${{env.html}}
          echo "<a href=${{env.dstnamegz}}>${{env.dstnamegz}} ($(stat -c%s ${{env.GHPAGE_DIR}}/${{env.dstnamegz}}) bytes)</a><br></body></html>" >> ${{env.html}}
          echo '{"last_update":"${{env.datetime}}","board":"${{matrix.board}}","firmware":"${{env.dstname}}","version":"${{env.version}}","build":"${{env.build}}"}' > ${{env.json}}


      #- name: Upload artifact ${{matrix.matrix-context}}
        #uses: actions/upload-artifact@v2
        #with:
          #name: "Platformio Build"
          #path: ${{env.GHPAGE_DIR}}/${{env.SKETCH_NAME}}.${{matrix.board}}.bin.gz


      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: ${{env.GHPAGE_DIR}}/ # The folder the action should deploy.


